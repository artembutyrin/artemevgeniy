у меня есть окно смерти:
class DeathWindow:
        def __init__(self):
            self.font = pygame.font.SysFont(None, 48)
            self.screen = pygame.display.set_mode((1700, 620))
            self.clock = pygame.time.Clock()

        def show(self):
            while True:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_r:
                            return

                self.screen.fill((0, 0, 0))
                death_text = self.font.render("Вы проиграли!", True, (255, 255, 255))
                self.screen.blit(death_text, (150, 250))

                pygame.display.flip()
                self.clock.tick(30)
есть основной код: 
if __name__ == '__main__':
        pygame.init()
        clock = pygame.time.Clock()

        hero_move_speed = 1

        anim_counter_fish = 0
        anim_counter_hero = 0
        anim_counter_tornado = 0
        anim_counter_guardian = 0
        anim_counter_princ = 0
        Kolvo_level = 2

        s_kaplya = pygame.mixer.Sound('sound/effect/kaplya.wav')
        s_kaplya3 = pygame.mixer.Sound('sound/effect/kaplya3.wav')
        s_fire_bullit = pygame.mixer.Sound('sound/effect/fire_bullit.wav')
        s_HP_0 = pygame.mixer.Sound('sound/effect/HP_0.wav')
        s_HP_minus = pygame.mixer.Sound('sound/effect/HP_minus.wav')
        s_kvak = pygame.mixer.Sound('sound/effect/kvak.wav')
        s_portal = pygame.mixer.Sound('sound/effect/portal.wav')
        s_prygok = pygame.mixer.Sound('sound/effect/prygok.wav')
        s_veter = pygame.mixer.Sound('sound/effect/veter.wav')
        s_berserk = pygame.mixer.Sound('sound/effect/berserk.wav')

        hero_timer_anim = pygame.USEREVENT
        fish_timer_create = pygame.USEREVENT + 1
        fish_timer_anim = pygame.USEREVENT + 2
        portal_timer_create = pygame.USEREVENT + 3
        tornado_life_timer = pygame.USEREVENT + 4
        guardian_timer_anim = pygame.USEREVENT + 5
        tornado_life_anim = pygame.USEREVENT + 6
        fireprinc_attac_kd = pygame.USEREVENT + 7
        fireprinc_timer_anim = pygame.USEREVENT + 8
        waterEmpress_attac_kd = pygame.USEREVENT + 9
        waterEmpress_timer_anim = pygame.USEREVENT + 10
        # superr_kd = pygame.USEREVENT + 9

        pygame.time.set_timer(hero_timer_anim, 150)
        pygame.time.set_timer(fish_timer_anim, 100)
        pygame.time.set_timer(fish_timer_create, 4000)
        pygame.time.set_timer(tornado_life_timer, 7000)
        pygame.time.set_timer(tornado_life_anim, 100)
        pygame.time.set_timer(guardian_timer_anim, 100)
        pygame.time.set_timer(fireprinc_timer_anim, 100)
        pygame.time.set_timer(fireprinc_attac_kd, 1000)
        pygame.time.set_timer(waterEmpress_attac_kd, 1000)
        pygame.time.set_timer(waterEmpress_timer_anim, 100)
        # pygame.time.set_timer(superr_kd, 500)

        size = width, height = 1700, 620
        screen = pygame.display.set_mode(size)
        all_sprites = pygame.sprite.Group()
        background_sprite = pygame.sprite.Group()
        fish_sprites = pygame.sprite.Group()
        monsters_sprites = pygame.sprite.Group()
        hero_sprites = pygame.sprite.Group()
        images = pygame.sprite.Group()
        heart_sprites = pygame.sprite.Group()
        portal_sprite = pygame.sprite.Group()
        bullit_sprite = pygame.sprite.Group()
        bullit_m_sprite = pygame.sprite.Group()
        tornado_sprite = pygame.sprite.Group()
        platform_sprites = pygame.sprite.Group()
        platform_sprites.add(platform1, platform2, platform3, platform4)

        Nomer_Level = 0
        load_game = True
        end_of_level = False
        portal_not_exist = True

        running = True
        death_window = DeathWindow()
        while running:

            if load_game:
                Level(background_sprite, 0, Nomer_Level)
                Level(background_sprite, 1700, Nomer_Level)
                magic_hero = Hero(50, 400)
                for i in range(magic_hero.HP):
                    StaticImg(heart_sprites, 25 * i + 10, 50, 1)
                load_game = False

                if Nomer_Level == 0:
                    pygame.mixer.music.load('sound/musik/fish.mp3')
                    pygame.mixer.music.play(-1)
                    MonsterFish(fish_sprites, 350)
                    pygame.time.set_timer(portal_timer_create, 500)
                    portal_not_exist = True

                if Nomer_Level == 1:
                    pygame.mixer.music.load('sound/musik/prince.mp3')
                    pygame.mixer.music.play(-1)
                    Guardian_monster1 = Guardian(monsters_sprites, 1500, 50)
                    Guardian_monster2 = Guardian(monsters_sprites, 1400, 25)
                    Guardian_monster3 = Guardian(monsters_sprites, 1300, 400)
                    FirePrinc_monster = FirePrinc(monsters_sprites, 400, 280)
                    pygame.time.set_timer(portal_timer_create, 10000)
                    portal_not_exist = True

                if Nomer_Level == 2:
                    pygame.mixer.music.load('sound/musik/waterEmpress.mp3')
                    pygame.mixer.music.play(-1)
                    waterEmpress_monster = WaterEmpress(monsters_sprites, 400, 100)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

                if event.type == pygame.KEYUP:
                    magic_hero.speed = 1
                    if not magic_hero.loser:
                        if magic_hero.condition != "hide":
                            magic_hero.condition = "passiv"

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w:
                        if not magic_hero.loser:
                            s_kaplya.play()
                            HeroBullit(bullit_sprite, magic_hero.rect.x + 100, magic_hero.rect.y + 70)

                    if event.key == pygame.K_q:
                        if not magic_hero.loser:
                            s_veter.play()
                            HeroBullitTornado(tornado_sprite, random.randint(100, 1500), 200)

                    if event.key == pygame.K_e:
                        # if event.type != superr_kd:
                        if not magic_hero.loser:
                            s_kaplya3.play()
                            for b in range(1, 4):
                                HeroBullitSuper(bullit_sprite, magic_hero.rect.x + 100, magic_hero.rect.y + 70, b)

                    if event.key == pygame.K_a:
                        magic_hero.condition = "left"

                    if event.key == pygame.K_d:
                        magic_hero.condition = "right"

                    if event.key == pygame.K_LSHIFT:
                        # crazy run 25 -  norm 3
                        magic_hero.speed = 25

                    if event.key == pygame.K_SPACE:
                        s_prygok.play()
                        if not magic_hero.jump_flg:
                            magic_hero.jump()

                    if event.key == pygame.K_f:
                        s_berserk.play()
                        StaticImg(images, 600, 50, 0)
                        pygame.time.set_timer(fish_timer_create, 500)

                    if event.key == pygame.K_n:
                        if magic_hero.loser:
                            # old level picture: you are LOSER? press "n"
                            Nomer_Level -= 1
                            end_of_level = True

                if event.type == tornado_life_anim:
                    anim_counter_tornado += 1
                    if anim_counter_tornado == 6:
                        anim_counter_tornado = 0

                if event.type == hero_timer_anim:
                    magic_hero.anim_count += 1
                    if magic_hero.anim_count == 30:
                        magic_hero.anim_count = 0
                        if magic_hero.loser:
                            magic_hero.anim_count = 8

                if event.type == fish_timer_anim:
                    anim_counter_fish += 1
                    if anim_counter_fish == 5:
                        anim_counter_fish = 0

                if Nomer_Level == 1:
                    if event.type == guardian_timer_anim:
                        anim_counter_guardian += 1
                        if anim_counter_guardian == 4:
                            anim_counter_guardian = 0

                    if event.type == fireprinc_timer_anim:
                        FirePrinc_monster.anim_count += 1
                        if FirePrinc_monster.anim_count == 30:
                            FirePrinc_monster.anim_count = 0

                    if event.type == fish_timer_create:  # время стрельбы такое же как рыбы
                        Guardian_monster1.gun()
                        Guardian_monster2.gun()
                        Guardian_monster3.gun()

                    if FirePrinc_monster.not_action:
                        FirePrinc_monster.random_action = random.randint(1, 7)
                        FirePrinc_monster.not_action = False

                if Nomer_Level == 2:
                    if event.type == waterEmpress_timer_anim:
                        waterEmpress_monster.anim_count += 1
                        if waterEmpress_monster.anim_count == 30:
                            waterEmpress_monster.anim_count = 0

                    if waterEmpress_monster.not_action:
                        waterEmpress_monster.random_action = random.randint(1, 7)
                        print(waterEmpress_monster.random_action)
                        waterEmpress_monster.not_action = False

                if event.type == tornado_life_timer:
                    for spr in tornado_sprite:
                        spr.kill()

                if event.type == portal_timer_create:
                    if portal_not_exist:
                        portal = Portal()
                        portal_not_exist = False

                if Nomer_Level == 0:
                    if event.type == fish_timer_create:
                        s_kvak.play()
                        fish_y = random.randint(50, 500)
                        MonsterFish(fish_sprites, fish_y)

            magic_hero.move()
            if not end_of_level:
                end_of_level = magic_hero.portal_collide()

            all_sprites.update()
            all_sprites.draw(screen)

            if end_of_level:
                magic_hero.condition = "hide"
                Nomer_Level += 1
                if Nomer_Level > Kolvo_level:
                    print("the end")
                    pygame.quit()
                load_game = True
                end_of_level = False
                for spr in all_sprites:
                    spr.kill()

            for platform in platform_sprites:
                screen.blit(platform.image, platform.rect)

            if magic_hero.HP == 0:  # Проверка смерти персонажа
                death_window.show()


            clock.tick(50)
            pygame.display.flip()


        pygame.quit()
    print("Игра запущена")

есть код персонажа Hero:
class Hero(pygame.sprite.Sprite):
        hero_pasiv = [load_image("pasiv/pasivv_1.png"),
                      load_image("pasiv/pasivv_2.png"),
                      load_image("pasiv/pasivv_3.png"),
                      load_image("pasiv/pasivv_4.png"),
                      load_image("pasiv/pasivv_5.png"),
                      load_image("pasiv/pasivv_6.png")]

        right_walk = [load_image("right_walk/right_walk_1.png"),
                      load_image("right_walk/right_walk_2.png"),
                      load_image("right_walk/right_walk_3.png"),
                      load_image("right_walk/right_walk_4.png")]

        left_walk = [load_image("left_walk/left_walk_1.png"),
                     load_image("left_walk/left_walk_2.png"),
                     load_image("left_walk/left_walk_3.png"),
                     load_image("left_walk/left_walk_4.png")]

        lose = [load_image("lose/lose_1.png"),
                load_image("lose/lose_2.png"),
                load_image("lose/lose_3.png"),
                load_image("lose/lose_4.png"),
                load_image("lose/lose_5.png"),
                load_image("lose/lose_6.png"),
                load_image("lose/lose_7.png"),
                load_image("lose/lose_8.png")]

        run_right = [load_image("right_run/right_run_1.png"),
                     load_image("right_run/right_run_2.png"),
                     load_image("right_run/right_run_3.png"),
                     load_image("right_run/right_run_4.png"),
                     load_image("right_run/right_run_5.png"),
                     load_image("right_run/right_run_6.png"),
                     load_image("right_run/right_run_7.png"),
                     load_image("right_run/right_run_8.png")]

        hide = [load_image("hide/hide_4.png"),
                load_image("hide/hide_3.png"),
                load_image("hide/hide_2.png"),
                load_image("hide/hide_1.png")]

        def __init__(self, x_pos, y_pos):
            super().__init__(hero_sprites, all_sprites)
            self.image = Hero.hero_pasiv[0]
            self.rect = self.image.get_rect()
            self.rect.x = x_pos
            self.rect.y = y_pos
            self.y_start = y_pos
            self.anim_count = 0
            self.condition = "hide"
            self.speed = 1
            self.jump_flg = False
            self.jump_size = 0
            self.HP = 3
            self.loser = False

        def update(self, *args):
            if self.condition == "hide":
                a_c = self.anim_count % 4
                self.image = Hero.hide[a_c]
                if self.anim_count == 8:
                    s_portal.play()
                    self.condition = "passiv"

            if self.condition == "passiv":
                self.anim_count = self.anim_count % 6
                self.image = Hero.hero_pasiv[self.anim_count]

            if self.condition == "left":
                self.anim_count = self.anim_count % 4
                self.image = Hero.left_walk[self.anim_count]

            if self.condition == "right":
                self.anim_count = self.anim_count % 8
                self.image = Hero.run_right[self.anim_count]

            if self.condition == "lose":
                if self.anim_count < 8:
                    self.image = Hero.lose[self.anim_count]

            if magic_hero.bullitcollide(bullit_m_sprite):
                magic_hero.HP_minus()
                if magic_hero.HP == 0:
                    s_HP_0.play()
                else:
                    s_HP_minus.play()
            self.life_update()

        def move(self):
            global hero_move_x, hero_move_y
            if self.loser:
                return

            if self.condition == "hide":
                return

            if self.condition == "passiv":
                hero_move_x = 0
                hero_move_y = 0

            if self.condition == "left":

                hero_move_x = -1 * self.speed
                if self.rect.x < 10:
                    hero_move_x = 0
                hero_move_y = 0

            if self.condition == "right":
                hero_move_x = 1 * self.speed
                if self.rect.x > 1550:
                    hero_move_x = 0
                hero_move_y = 0

            if self.jump_flg:
                self.speed = 15
                if self.jump_size > 0:
                    hero_move_y = (self.jump_size ** 2) // 2
                else:
                    hero_move_y = -1 * (self.jump_size ** 2) // 2

                self.jump_size += 1
                if self.jump_size == 12:
                    self.jump_flg = False
                    self.speed = 1
                    self.rect.y = self.y_start
                    hero_move_y = 0
                    
            platform_collide = pygame.sprite.spritecollide(self, platform_sprites, False) 
            for platform in platform_collide: 
                if hero_move_y > 0:
                    self.rect.bottom = platform.rect.top 
                    self.jump_size = 0 
                    self.jump_flg = False 
                elif hero_move_y < 0: 
                    self.rect.top = platform.rect.bottom 
                    self.jump_size = 0

            self.rect = self.rect.move(hero_move_x, hero_move_y)

        def jump(self):
            self.jump_flg = True
            self.jump_size = -12

        def life_update(self):
            if self.HP == 0:
                self.condition = "lose"
                self.loser = True

        def portal_collide(self):
            is_portal = pygame.sprite.spritecollideany(self, portal_sprite)
            if is_portal:
                StaticImg(images, 600, 50, 1)
                return True
            return False

        def bullitcollide(self, group):
            is_kill = pygame.sprite.spritecollideany(self, group)
            pygame.sprite.spritecollide(self, group, True)
            if is_kill:
                return True
            return False

        def HP_minus(self):
            self.HP -= 1
            for spr in heart_sprites:
                spr.kill()
            for i in range(self.HP):
                StaticImg(heart_sprites, 25 * i + 10, 50, 1)

и есть класс Level: 
class Level(pygame.sprite.Sprite):
        background = [load_image("backgrounds/under_water.jpg"),
                      load_image("backgrounds/defolt_forest.jpg"),
                      load_image("backgrounds/night_water.jpg")]

        def __init__(self, group, x_pos, nomer):
            super().__init__(group, all_sprites)
            self.image = Level.background[nomer]
            self.rect = self.image.get_rect()
            self.rect.x = x_pos
            self.rect.y = 0

        def update(self, *args):
            self.rect = self.rect.move(-1, 0)
            if self.rect.x == -1700:
                self.rect.x = 1700

мне нужно чтобы когда мой персонаж умирал на экране появлялось окно смерти и игры перезапускалась заново.
